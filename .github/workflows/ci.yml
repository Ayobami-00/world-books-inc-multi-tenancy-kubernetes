
name: CI/CD. 
on:
  push:
    branches:
    - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  IMAGE_NAME: backend-service-go
  IMAGE_TAG: ${{ github.sha }}

permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

jobs:
# backend-service-go folder job.
  deploy_eureka_api_gateway_go:

    name: Deploy World Books Inc Backend Service Go to AWS EKS
    runs-on: ubuntu-latest

    defaults:
      run:
      # backend-service-go folder working directory.
        working-directory: backend-service-go

    steps:

      - name: Check out code
        uses: actions/checkout@v2  

      - name: Install kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.21.3'
        id: install

      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Install helm
        run: |
          curl -LO https://get.helm.sh/helm-v3.12.3-linux-amd64.tar.gz
          tar xfz helm-v3.12.3-linux-amd64.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/  

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.GIT_ACTIONS_AWS_ACTION_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Load envs and save to .env file
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_ENVIRONMENT:  ${{ secrets.ENVIRONMENT }}
          envkey_SERVER_PORT:  ${{ secrets.SERVER_PORT }}
          envkey_CONTEXT_TIMEOUT: ${{ secrets.CONTEXT_TIMEOUT }}
          envkey_BACKEND_SERVICE_URL: ${{ secrets.BACKEND_SERVICE_URL }} 
          
          # fail_on_empty: true
          file_name: .env

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY/$IMAGE_NAME:latest .
          docker push -a $ECR_REGISTRY/$ECR_REPOSITORY/$IMAGE_NAME